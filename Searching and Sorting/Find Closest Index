/*
Problem statement
You have been given a sorted(in ascending order) integer array/list('nums') of size N and an element 'target'. Your task is to return the index of closest element to the 'target' in the array 'nums'.

Example:
Input- N = 7 target = 4
A = [1, 3, 7, 9, 11, 12, 45]

Output: 1

Explanation: For nums = [1, 3, 7, 9, 11, 12, 45],
The element 3 is closest to the target element , so we will return the index of 3.
Hence, the answer is '1'.
*/

public class Solution {
    public static int binarySearchClosest(int []nums, int left, int right, int target) {
        //Your code goes here
        int closestDistance = Integer.MAX_VALUE;
        while(left <= right){
            int mid = left + ((right - left) / 2);
            if(nums[mid] == target){
                return mid;
            }
            if(nums[mid] > target){
                int currDist = nums[mid] - target;
                if(currDist < closestDistance){
                    closestDistance = mid;
                }
                right = mid - 1;
            }
            else{
                int currDist = target - nums[mid];
                if(currDist < closestDistance){
                    closestDistance = mid;
                }
                left = mid + 1;
            }
        }
        return closestDistance;
    }
}
